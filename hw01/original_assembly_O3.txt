
original.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <alloc_2D_double>:

    exit(0);
}

double **alloc_2D_double(int nrows, int ncolumns)
{
   0:	41 54                	push   r12
   2:	41 89 f4             	mov    r12d,esi
   5:	55                   	push   rbp
   6:	89 fd                	mov    ebp,edi
       difficult! */

    /* Returns the pointer **array. Returns NULL on error */
    int i;

    double **array = (double **)malloc(nrows*sizeof(double *));
   8:	48 63 ff             	movsxd rdi,edi
   b:	48 c1 e7 03          	shl    rdi,0x3

    exit(0);
}

double **alloc_2D_double(int nrows, int ncolumns)
{
   f:	53                   	push   rbx
       difficult! */

    /* Returns the pointer **array. Returns NULL on error */
    int i;

    double **array = (double **)malloc(nrows*sizeof(double *));
  10:	e8 00 00 00 00       	call   15 <alloc_2D_double+0x15>
    if (array==NULL)
  15:	48 85 c0             	test   rax,rax
       difficult! */

    /* Returns the pointer **array. Returns NULL on error */
    int i;

    double **array = (double **)malloc(nrows*sizeof(double *));
  18:	48 89 c3             	mov    rbx,rax
    if (array==NULL)
  1b:	74 61                	je     7e <alloc_2D_double+0x7e>
        return NULL;
    array[0] = (double *)malloc(nrows*ncolumns*sizeof(double));
  1d:	89 ef                	mov    edi,ebp
  1f:	41 0f af fc          	imul   edi,r12d
  23:	48 63 ff             	movsxd rdi,edi
  26:	48 c1 e7 03          	shl    rdi,0x3
  2a:	e8 00 00 00 00       	call   2f <alloc_2D_double+0x2f>
    if (array[0]==NULL)
  2f:	48 85 c0             	test   rax,rax
    int i;

    double **array = (double **)malloc(nrows*sizeof(double *));
    if (array==NULL)
        return NULL;
    array[0] = (double *)malloc(nrows*ncolumns*sizeof(double));
  32:	48 89 03             	mov    QWORD PTR [rbx],rax
    if (array[0]==NULL)
  35:	74 47                	je     7e <alloc_2D_double+0x7e>
        return NULL;

    for (i = 1; i < nrows; ++i)
  37:	83 fd 01             	cmp    ebp,0x1
  3a:	7e 3a                	jle    76 <alloc_2D_double+0x76>
  3c:	8d 4d fe             	lea    ecx,[rbp-0x2]
  3f:	49 63 f4             	movsxd rsi,r12d
  42:	48 8d 53 08          	lea    rdx,[rbx+0x8]
  46:	48 c1 e6 03          	shl    rsi,0x3
  4a:	48 89 c7             	mov    rdi,rax
  4d:	4c 8d 44 cb 10       	lea    r8,[rbx+rcx*8+0x10]
  52:	48 89 f1             	mov    rcx,rsi
  55:	eb 0c                	jmp    63 <alloc_2D_double+0x63>
  57:	66 0f 1f 84 00 00 00 	nop    WORD PTR [rax+rax*1+0x0]
  5e:	00 00 
  60:	48 8b 3b             	mov    rdi,QWORD PTR [rbx]
        array[i] = array[0] + i * ncolumns;
  63:	48 01 cf             	add    rdi,rcx
  66:	48 83 c2 08          	add    rdx,0x8
  6a:	48 01 f1             	add    rcx,rsi
  6d:	48 89 7a f8          	mov    QWORD PTR [rdx-0x8],rdi
        return NULL;
    array[0] = (double *)malloc(nrows*ncolumns*sizeof(double));
    if (array[0]==NULL)
        return NULL;

    for (i = 1; i < nrows; ++i)
  71:	4c 39 c2             	cmp    rdx,r8
  74:	75 ea                	jne    60 <alloc_2D_double+0x60>
  76:	48 89 d8             	mov    rax,rbx
        array[i] = array[0] + i * ncolumns;

    return array;

}
  79:	5b                   	pop    rbx
  7a:	5d                   	pop    rbp
  7b:	41 5c                	pop    r12
  7d:	c3                   	ret    
    /* Returns the pointer **array. Returns NULL on error */
    int i;

    double **array = (double **)malloc(nrows*sizeof(double *));
    if (array==NULL)
        return NULL;
  7e:	31 c0                	xor    eax,eax
  80:	eb f7                	jmp    79 <alloc_2D_double+0x79>
  82:	66 66 66 66 66 2e 0f 	data32 data32 data32 data32 nop WORD PTR cs:[rax+rax*1+0x0]
  89:	1f 84 00 00 00 00 00 

0000000000000090 <double_2D_array_free>:
    return array;

}

void double_2D_array_free(double **array)
{
  90:	53                   	push   rbx
  91:	48 89 fb             	mov    rbx,rdi
    /* Frees the memory previously allocated by alloc_2D_double */
    free(array[0]);
  94:	48 8b 3f             	mov    rdi,QWORD PTR [rdi]
  97:	e8 00 00 00 00       	call   9c <double_2D_array_free+0xc>
    free(array);
  9c:	48 89 df             	mov    rdi,rbx
}
  9f:	5b                   	pop    rbx

void double_2D_array_free(double **array)
{
    /* Frees the memory previously allocated by alloc_2D_double */
    free(array[0]);
    free(array);
  a0:	e9 00 00 00 00       	jmp    a5 <double_2D_array_free+0x15>

Disassembly of section .text.startup:

0000000000000000 <main>:
#include <math.h>
double **alloc_2D_double(int nrows, int ncolumns);
void double_2D_array_free(double **array);

int main(int argc, char *argv[])
{
   0:	41 57                	push   r15
   2:	41 56                	push   r14
   4:	41 55                	push   r13
   6:	41 54                	push   r12
   8:	55                   	push   rbp
   9:	48 89 f5             	mov    rbp,rsi
   c:	53                   	push   rbx
   d:	89 fb                	mov    ebx,edi
   f:	48 83 ec 58          	sub    rsp,0x58
    FILE *fptr;
    char *cptr;

    a = 3.2;

    time0 = clock(); /*Start Time*/
  13:	e8 00 00 00 00       	call   18 <main+0x18>
}

__fortify_function int
printf (const char *__restrict __fmt, ...)
{
  return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
  18:	be 00 00 00 00       	mov    esi,0x0
  1d:	48 89 44 24 30       	mov    QWORD PTR [rsp+0x30],rax
  22:	48 89 c2             	mov    rdx,rax
  25:	bf 01 00 00 00       	mov    edi,0x1
  2a:	31 c0                	xor    eax,eax
  2c:	e8 00 00 00 00       	call   31 <main+0x31>
       cut from the command line.
                Argument 1 should be the filename of the coord file (char).
                Argument 2 should be the cut off (float). */
    /* Quit therefore if iarg does not equal 3 = executable name,
       filename, cut off */
    if (argc != 3)
  31:	83 fb 03             	cmp    ebx,0x3
  34:	74 28                	je     5e <main+0x5e>
    {
        printf("ERROR: only %d command line options detected", argc-1);
  36:	8d 53 ff             	lea    edx,[rbx-0x1]
  39:	be 00 00 00 00       	mov    esi,0x0
  3e:	bf 01 00 00 00       	mov    edi,0x1
  43:	31 c0                	xor    eax,eax
  45:	e8 00 00 00 00       	call   4a <main+0x4a>
  4a:	bf 00 00 00 00       	mov    edi,0x0
  4f:	e8 00 00 00 00       	call   54 <main+0x54>
        printf (" - need 2 options, filename and cutoff.\n");
        exit(1);
  54:	bf 01 00 00 00       	mov    edi,0x1
  59:	e8 00 00 00 00       	call   5e <main+0x5e>
  5e:	48 8b 55 08          	mov    rdx,QWORD PTR [rbp+0x8]
  62:	be 00 00 00 00       	mov    esi,0x0
  67:	bf 01 00 00 00       	mov    edi,0x1
  6c:	31 c0                	xor    eax,eax
  6e:	e8 00 00 00 00       	call   73 <main+0x73>
    }
    printf("Coordinates will be read from file: %s\n",argv[1]);

    /* Step 2 - Open the coordinate file and read the first line to
       obtain the number of atoms */
    if ((fptr=fopen(argv[1],"r"))==NULL)
  73:	48 8b 7d 08          	mov    rdi,QWORD PTR [rbp+0x8]
  77:	be 00 00 00 00       	mov    esi,0x0
  7c:	e8 00 00 00 00       	call   81 <main+0x81>
  81:	48 85 c0             	test   rax,rax
  84:	48 89 44 24 28       	mov    QWORD PTR [rsp+0x28],rax
  89:	0f 84 5a 03 00 00    	je     3e9 <main+0x3e9>
        printf("ERROR: Could not open file called %s\n",argv[1]);
        exit(1);
    }
    else
    {
        fscanf(fptr, "%ld", &natom);
  8f:	48 8b 7c 24 28       	mov    rdi,QWORD PTR [rsp+0x28]
  94:	48 8d 54 24 40       	lea    rdx,[rsp+0x40]
  99:	be 00 00 00 00       	mov    esi,0x0
  9e:	31 c0                	xor    eax,eax
  a0:	e8 00 00 00 00       	call   a5 <main+0xa5>
  a5:	48 8b 54 24 40       	mov    rdx,QWORD PTR [rsp+0x40]
  aa:	be 00 00 00 00       	mov    esi,0x0
  af:	bf 01 00 00 00       	mov    edi,0x1
  b4:	31 c0                	xor    eax,eax
  b6:	e8 00 00 00 00       	call   bb <main+0xbb>
    }

    printf("Natom = %ld\n", natom);

    cut = strtod(argv[2],&cptr);
  bb:	48 8b 7d 10          	mov    rdi,QWORD PTR [rbp+0x10]
  bf:	48 8d 74 24 48       	lea    rsi,[rsp+0x48]
  c4:	e8 00 00 00 00       	call   c9 <main+0xc9>
  c9:	be 00 00 00 00       	mov    esi,0x0
  ce:	bf 01 00 00 00       	mov    edi,0x1
  d3:	b8 01 00 00 00       	mov    eax,0x1
  d8:	f2 0f 11 44 24 08    	movsd  QWORD PTR [rsp+0x8],xmm0
  de:	e8 00 00 00 00       	call   e3 <main+0xe3>
    printf("cut = %10.4f\n", cut);

    /* Step 3 - Allocate the arrays to store the coordinate and charge
       data */
    coords=alloc_2D_double(3,natom);
  e3:	8b 74 24 40          	mov    esi,DWORD PTR [rsp+0x40]
  e7:	bf 03 00 00 00       	mov    edi,0x3
  ec:	e8 00 00 00 00       	call   f1 <main+0xf1>
    if ( coords==NULL )
  f1:	48 85 c0             	test   rax,rax
    cut = strtod(argv[2],&cptr);
    printf("cut = %10.4f\n", cut);

    /* Step 3 - Allocate the arrays to store the coordinate and charge
       data */
    coords=alloc_2D_double(3,natom);
  f4:	49 89 c6             	mov    r14,rax
  f7:	be 00 00 00 00       	mov    esi,0x0
    if ( coords==NULL )
  fc:	0f 84 d1 02 00 00    	je     3d3 <main+0x3d3>
    {
        printf("Allocation error coords");
        exit(1);
    }
    q=(double *)malloc(natom*sizeof(double));
 102:	4c 8b 7c 24 40       	mov    r15,QWORD PTR [rsp+0x40]
 107:	4a 8d 3c fd 00 00 00 	lea    rdi,[r15*8+0x0]
 10e:	00 
 10f:	e8 00 00 00 00       	call   114 <main+0x114>
    if ( q == NULL )
 114:	48 85 c0             	test   rax,rax
    if ( coords==NULL )
    {
        printf("Allocation error coords");
        exit(1);
    }
    q=(double *)malloc(natom*sizeof(double));
 117:	48 89 c5             	mov    rbp,rax
    if ( q == NULL )
 11a:	0f 84 ae 02 00 00    	je     3ce <main+0x3ce>
        printf("Allocation error q");
        exit(1);
    }

    /* Step 4 - read the coordinates and charges. */
    for (i = 0; i<natom; ++i)
 120:	31 db                	xor    ebx,ebx
 122:	4d 85 ff             	test   r15,r15
 125:	49 89 c4             	mov    r12,rax
 128:	7e 42                	jle    16c <main+0x16c>
 12a:	66 0f 1f 44 00 00    	nop    WORD PTR [rax+rax*1+0x0]
 130:	4c 8d 04 dd 00 00 00 	lea    r8,[rbx*8+0x0]
 137:	00 
    {
        fscanf(fptr, "%lf %lf %lf %lf",&coords[0][i],
 138:	48 8b 7c 24 28       	mov    rdi,QWORD PTR [rsp+0x28]
 13d:	4d 89 e1             	mov    r9,r12
 140:	31 c0                	xor    eax,eax
 142:	be 00 00 00 00       	mov    esi,0x0
        printf("Allocation error q");
        exit(1);
    }

    /* Step 4 - read the coordinates and charges. */
    for (i = 0; i<natom; ++i)
 147:	48 83 c3 01          	add    rbx,0x1
    {
        fscanf(fptr, "%lf %lf %lf %lf",&coords[0][i],
 14b:	4c 89 c1             	mov    rcx,r8
 14e:	4c 89 c2             	mov    rdx,r8
 151:	49 03 4e 08          	add    rcx,QWORD PTR [r14+0x8]
 155:	49 03 16             	add    rdx,QWORD PTR [r14]
 158:	4d 03 46 10          	add    r8,QWORD PTR [r14+0x10]
 15c:	49 83 c4 08          	add    r12,0x8
 160:	e8 00 00 00 00       	call   165 <main+0x165>
        printf("Allocation error q");
        exit(1);
    }

    /* Step 4 - read the coordinates and charges. */
    for (i = 0; i<natom; ++i)
 165:	48 39 5c 24 40       	cmp    QWORD PTR [rsp+0x40],rbx
 16a:	7f c4                	jg     130 <main+0x130>
    {
        fscanf(fptr, "%lf %lf %lf %lf",&coords[0][i],
               &coords[1][i],&coords[2][i],&q[i]);
    }

    time1 = clock(); /*time after file read*/
 16c:	e8 00 00 00 00       	call   171 <main+0x171>
 171:	be 00 00 00 00       	mov    esi,0x0
 176:	48 89 44 24 38       	mov    QWORD PTR [rsp+0x38],rax
 17b:	48 89 c2             	mov    rdx,rax
 17e:	bf 01 00 00 00       	mov    edi,0x1
 183:	31 c0                	xor    eax,eax


    /* Step 5 - calculate the number of pairs and E. - this is the
       majority of the work. */
    total_e = 0.0;
    cut_count = 0;
 185:	45 31 e4             	xor    r12d,r12d
 188:	e8 00 00 00 00       	call   18d <main+0x18d>
    for (i=1; i<=natom; ++i)
 18d:	48 8b 44 24 40       	mov    rax,QWORD PTR [rsp+0x40]
    printf("Value of system clock after coord read = %ld\n",time1);


    /* Step 5 - calculate the number of pairs and E. - this is the
       majority of the work. */
    total_e = 0.0;
 192:	66 0f 57 e4          	xorpd  xmm4,xmm4
    cut_count = 0;
    for (i=1; i<=natom; ++i)
 196:	48 85 c0             	test   rax,rax
 199:	0f 8e b8 00 00 00    	jle    257 <main+0x257>
    printf("Value of system clock after coord read = %ld\n",time1);


    /* Step 5 - calculate the number of pairs and E. - this is the
       majority of the work. */
    total_e = 0.0;
 19f:	66 0f 57 e4          	xorpd  xmm4,xmm4
    cut_count = 0;
    for (i=1; i<=natom; ++i)
 1a3:	41 bf 01 00 00 00    	mov    r15d,0x1


    /* Step 5 - calculate the number of pairs and E. - this is the
       majority of the work. */
    total_e = 0.0;
    cut_count = 0;
 1a9:	45 31 e4             	xor    r12d,r12d
 1ac:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
 1b0:	4e 8d 2c fd f8 ff ff 	lea    r13,[r15*8-0x8]
 1b7:	ff 
        printf("Allocation error q");
        exit(1);
    }

    /* Step 4 - read the coordinates and charges. */
    for (i = 0; i<natom; ++i)
 1b8:	bb 01 00 00 00       	mov    ebx,0x1
 1bd:	eb 0a                	jmp    1c9 <main+0x1c9>
 1bf:	90                   	nop
       majority of the work. */
    total_e = 0.0;
    cut_count = 0;
    for (i=1; i<=natom; ++i)
    {
        for (j=1; j<=natom; ++j)
 1c0:	48 83 c3 01          	add    rbx,0x1
 1c4:	48 39 c3             	cmp    rbx,rax
 1c7:	7f 7c                	jg     245 <main+0x245>
        {
            if ( j < i )   /* Avoid double counting. */
 1c9:	4c 39 fb             	cmp    rbx,r15
 1cc:	7d f2                	jge    1c0 <main+0x1c0>
            {
                vec2 = pow((coords[0][i-1]-coords[0][j-1]),2.0)
 1ce:	49 8b 36             	mov    rsi,QWORD PTR [r14]
 1d1:	48 8d 04 dd 00 00 00 	lea    rax,[rbx*8+0x0]
 1d8:	00 
 1d9:	f2 42 0f 10 1c 2e    	movsd  xmm3,QWORD PTR [rsi+r13*1]
 1df:	f2 0f 5c 5c 06 f8    	subsd  xmm3,QWORD PTR [rsi+rax*1-0x8]
                       + pow((coords[1][i-1]-coords[1][j-1]),2.0)
 1e5:	49 8b 76 08          	mov    rsi,QWORD PTR [r14+0x8]
 1e9:	f2 42 0f 10 14 2e    	movsd  xmm2,QWORD PTR [rsi+r13*1]
 1ef:	f2 0f 5c 54 06 f8    	subsd  xmm2,QWORD PTR [rsi+rax*1-0x8]
                       + pow((coords[2][i-1]-coords[2][j-1]),2.0);
 1f5:	49 8b 76 10          	mov    rsi,QWORD PTR [r14+0x10]
    {
        for (j=1; j<=natom; ++j)
        {
            if ( j < i )   /* Avoid double counting. */
            {
                vec2 = pow((coords[0][i-1]-coords[0][j-1]),2.0)
 1f9:	f2 0f 59 db          	mulsd  xmm3,xmm3
                       + pow((coords[1][i-1]-coords[1][j-1]),2.0)
                       + pow((coords[2][i-1]-coords[2][j-1]),2.0);
 1fd:	f2 42 0f 10 04 2e    	movsd  xmm0,QWORD PTR [rsi+r13*1]
 203:	f2 0f 5c 44 06 f8    	subsd  xmm0,QWORD PTR [rsi+rax*1-0x8]
        for (j=1; j<=natom; ++j)
        {
            if ( j < i )   /* Avoid double counting. */
            {
                vec2 = pow((coords[0][i-1]-coords[0][j-1]),2.0)
                       + pow((coords[1][i-1]-coords[1][j-1]),2.0)
 209:	f2 0f 59 d2          	mulsd  xmm2,xmm2
 20d:	f2 0f 58 d3          	addsd  xmm2,xmm3
                       + pow((coords[2][i-1]-coords[2][j-1]),2.0);
 211:	f2 0f 59 c0          	mulsd  xmm0,xmm0
    {
        for (j=1; j<=natom; ++j)
        {
            if ( j < i )   /* Avoid double counting. */
            {
                vec2 = pow((coords[0][i-1]-coords[0][j-1]),2.0)
 215:	f2 0f 58 c2          	addsd  xmm0,xmm2
                       + pow((coords[1][i-1]-coords[1][j-1]),2.0)
                       + pow((coords[2][i-1]-coords[2][j-1]),2.0);
                /* X^2 + Y^2 + Z^2 */
                rij = sqrt(vec2);
 219:	f2 0f 51 d0          	sqrtsd xmm2,xmm0
 21d:	66 0f 2e d2          	ucomisd xmm2,xmm2
 221:	0f 8a df 01 00 00    	jp     406 <main+0x406>
                /* Check if this is below the cut off */
                if ( rij <= cut )
 227:	f2 0f 10 4c 24 08    	movsd  xmm1,QWORD PTR [rsp+0x8]
 22d:	66 0f 2e ca          	ucomisd xmm1,xmm2
 231:	0f 83 31 01 00 00    	jae    368 <main+0x368>
 237:	48 8b 44 24 40       	mov    rax,QWORD PTR [rsp+0x40]
       majority of the work. */
    total_e = 0.0;
    cut_count = 0;
    for (i=1; i<=natom; ++i)
    {
        for (j=1; j<=natom; ++j)
 23c:	48 83 c3 01          	add    rbx,0x1
 240:	48 39 c3             	cmp    rbx,rax
 243:	7e 84                	jle    1c9 <main+0x1c9>

    /* Step 5 - calculate the number of pairs and E. - this is the
       majority of the work. */
    total_e = 0.0;
    cut_count = 0;
    for (i=1; i<=natom; ++i)
 245:	49 83 c7 01          	add    r15,0x1
 249:	49 39 c7             	cmp    r15,rax
 24c:	7f 09                	jg     257 <main+0x257>
    {
        for (j=1; j<=natom; ++j)
 24e:	48 85 c0             	test   rax,rax
 251:	0f 8f 59 ff ff ff    	jg     1b0 <main+0x1b0>
 257:	f2 0f 11 64 24 08    	movsd  QWORD PTR [rsp+0x8],xmm4
                }
            } /* if (j<i) */
        } /* for j=1 j<=natom */
    } /* for i=1 i<=natom */

    time2 = clock(); /* time after reading of file and calculation */
 25d:	e8 00 00 00 00       	call   262 <main+0x262>
 262:	be 00 00 00 00       	mov    esi,0x0
 267:	48 89 c2             	mov    rdx,rax
 26a:	48 89 c3             	mov    rbx,rax
 26d:	bf 01 00 00 00       	mov    edi,0x1
 272:	31 c0                	xor    eax,eax
 274:	e8 00 00 00 00       	call   279 <main+0x279>
 279:	bf 00 00 00 00       	mov    edi,0x0
 27e:	e8 00 00 00 00       	call   283 <main+0x283>
 283:	bf 00 00 00 00       	mov    edi,0x0
 288:	e8 00 00 00 00       	call   28d <main+0x28d>
 28d:	4c 89 e2             	mov    rdx,r12
 290:	be 00 00 00 00       	mov    esi,0x0
 295:	bf 01 00 00 00       	mov    edi,0x1
 29a:	31 c0                	xor    eax,eax
 29c:	e8 00 00 00 00       	call   2a1 <main+0x2a1>
 2a1:	f2 0f 10 64 24 08    	movsd  xmm4,QWORD PTR [rsp+0x8]
 2a7:	be 00 00 00 00       	mov    esi,0x0
 2ac:	bf 01 00 00 00       	mov    edi,0x1
 2b1:	b8 01 00 00 00       	mov    eax,0x1
 2b6:	66 0f 28 c4          	movapd xmm0,xmm4
 2ba:	e8 00 00 00 00       	call   2bf <main+0x2bf>
    printf("                         Final Results\n");
    printf("                         -------------\n");
    printf("                   Num Pairs = %ld\n",cut_count);
    printf("                     Total E = %14.10f\n",total_e);
    printf("     Time to read coord file = %14.4f Seconds\n",
           ((double )(time1-time0))/(double )CLOCKS_PER_SEC);
 2bf:	4c 8b 7c 24 38       	mov    r15,QWORD PTR [rsp+0x38]
 2c4:	4c 8b 64 24 30       	mov    r12,QWORD PTR [rsp+0x30]
 2c9:	be 00 00 00 00       	mov    esi,0x0
 2ce:	bf 01 00 00 00       	mov    edi,0x1
 2d3:	4c 89 f8             	mov    rax,r15
 2d6:	4c 29 e0             	sub    rax,r12
 2d9:	f2 48 0f 2a c0       	cvtsi2sd xmm0,rax
 2de:	b8 01 00 00 00       	mov    eax,0x1
    /* Step 6 - write out the results */
    printf("                         Final Results\n");
    printf("                         -------------\n");
    printf("                   Num Pairs = %ld\n",cut_count);
    printf("                     Total E = %14.10f\n",total_e);
    printf("     Time to read coord file = %14.4f Seconds\n",
 2e3:	f2 0f 5e 05 00 00 00 	divsd  xmm0,QWORD PTR [rip+0x0]        # 2eb <main+0x2eb>
 2ea:	00 
 2eb:	e8 00 00 00 00       	call   2f0 <main+0x2f0>
           ((double )(time1-time0))/(double )CLOCKS_PER_SEC);
    printf("         Time to calculate E = %14.4f Seconds\n",
           ((double )(time2-time1))/(double )CLOCKS_PER_SEC);
 2f0:	48 89 d8             	mov    rax,rbx
 2f3:	be 00 00 00 00       	mov    esi,0x0
 2f8:	bf 01 00 00 00       	mov    edi,0x1
 2fd:	4c 29 f8             	sub    rax,r15
    printf("        Total Execution Time = %14.4f Seconds\n",
           ((double )(time2-time0))/(double )CLOCKS_PER_SEC);
 300:	4c 29 e3             	sub    rbx,r12
    printf("                   Num Pairs = %ld\n",cut_count);
    printf("                     Total E = %14.10f\n",total_e);
    printf("     Time to read coord file = %14.4f Seconds\n",
           ((double )(time1-time0))/(double )CLOCKS_PER_SEC);
    printf("         Time to calculate E = %14.4f Seconds\n",
           ((double )(time2-time1))/(double )CLOCKS_PER_SEC);
 303:	f2 48 0f 2a c0       	cvtsi2sd xmm0,rax
 308:	b8 01 00 00 00       	mov    eax,0x1
    printf("                         -------------\n");
    printf("                   Num Pairs = %ld\n",cut_count);
    printf("                     Total E = %14.10f\n",total_e);
    printf("     Time to read coord file = %14.4f Seconds\n",
           ((double )(time1-time0))/(double )CLOCKS_PER_SEC);
    printf("         Time to calculate E = %14.4f Seconds\n",
 30d:	f2 0f 5e 05 00 00 00 	divsd  xmm0,QWORD PTR [rip+0x0]        # 315 <main+0x315>
 314:	00 
 315:	e8 00 00 00 00       	call   31a <main+0x31a>
           ((double )(time2-time1))/(double )CLOCKS_PER_SEC);
    printf("        Total Execution Time = %14.4f Seconds\n",
           ((double )(time2-time0))/(double )CLOCKS_PER_SEC);
 31a:	f2 48 0f 2a c3       	cvtsi2sd xmm0,rbx
 31f:	be 00 00 00 00       	mov    esi,0x0
 324:	bf 01 00 00 00       	mov    edi,0x1
 329:	b8 01 00 00 00       	mov    eax,0x1
    printf("                     Total E = %14.10f\n",total_e);
    printf("     Time to read coord file = %14.4f Seconds\n",
           ((double )(time1-time0))/(double )CLOCKS_PER_SEC);
    printf("         Time to calculate E = %14.4f Seconds\n",
           ((double )(time2-time1))/(double )CLOCKS_PER_SEC);
    printf("        Total Execution Time = %14.4f Seconds\n",
 32e:	f2 0f 5e 05 00 00 00 	divsd  xmm0,QWORD PTR [rip+0x0]        # 336 <main+0x336>
 335:	00 
 336:	e8 00 00 00 00       	call   33b <main+0x33b>
           ((double )(time2-time0))/(double )CLOCKS_PER_SEC);

    /* Step 7 - Deallocate the arrays - we should strictly check the
       return values here but for the purposes of this tutorial we can
       ignore this. */
    free(q);
 33b:	48 89 ef             	mov    rdi,rbp
 33e:	e8 00 00 00 00       	call   343 <main+0x343>
}

void double_2D_array_free(double **array)
{
    /* Frees the memory previously allocated by alloc_2D_double */
    free(array[0]);
 343:	49 8b 3e             	mov    rdi,QWORD PTR [r14]
 346:	e8 00 00 00 00       	call   34b <main+0x34b>
    free(array);
 34b:	4c 89 f7             	mov    rdi,r14
 34e:	e8 00 00 00 00       	call   353 <main+0x353>
       return values here but for the purposes of this tutorial we can
       ignore this. */
    free(q);
    double_2D_array_free(coords);

    fclose(fptr);
 353:	48 8b 7c 24 28       	mov    rdi,QWORD PTR [rsp+0x28]
 358:	e8 00 00 00 00       	call   35d <main+0x35d>

    exit(0);
 35d:	31 ff                	xor    edi,edi
 35f:	e8 00 00 00 00       	call   364 <main+0x364>
 364:	0f 1f 40 00          	nop    DWORD PTR [rax+0x0]
                /* Check if this is below the cut off */
                if ( rij <= cut )
                {
                    /* Increment the counter of pairs below cutoff */
                    ++cut_count;
                    current_e = (exp(rij*q[i-1])*exp(rij*q[j-1]))/rij;
 368:	66 0f 28 c2          	movapd xmm0,xmm2
 36c:	f2 0f 11 64 24 20    	movsd  QWORD PTR [rsp+0x20],xmm4
 372:	f2 0f 11 54 24 18    	movsd  QWORD PTR [rsp+0x18],xmm2
                rij = sqrt(vec2);
                /* Check if this is below the cut off */
                if ( rij <= cut )
                {
                    /* Increment the counter of pairs below cutoff */
                    ++cut_count;
 378:	49 83 c4 01          	add    r12,0x1
                    current_e = (exp(rij*q[i-1])*exp(rij*q[j-1]))/rij;
 37c:	f2 42 0f 59 44 fd f8 	mulsd  xmm0,QWORD PTR [rbp+r15*8-0x8]
 383:	e8 00 00 00 00       	call   388 <main+0x388>
 388:	f2 0f 10 54 24 18    	movsd  xmm2,QWORD PTR [rsp+0x18]
 38e:	f2 0f 10 6c dd f8    	movsd  xmm5,QWORD PTR [rbp+rbx*8-0x8]
 394:	f2 0f 11 44 24 10    	movsd  QWORD PTR [rsp+0x10],xmm0
 39a:	f2 0f 59 ea          	mulsd  xmm5,xmm2
 39e:	66 0f 28 c5          	movapd xmm0,xmm5
 3a2:	e8 00 00 00 00       	call   3a7 <main+0x3a7>
 3a7:	f2 0f 59 44 24 10    	mulsd  xmm0,QWORD PTR [rsp+0x10]
 3ad:	f2 0f 10 54 24 18    	movsd  xmm2,QWORD PTR [rsp+0x18]
                    total_e = total_e + current_e - 1.0/a;
 3b3:	f2 0f 10 64 24 20    	movsd  xmm4,QWORD PTR [rsp+0x20]
                /* Check if this is below the cut off */
                if ( rij <= cut )
                {
                    /* Increment the counter of pairs below cutoff */
                    ++cut_count;
                    current_e = (exp(rij*q[i-1])*exp(rij*q[j-1]))/rij;
 3b9:	f2 0f 5e c2          	divsd  xmm0,xmm2
                    total_e = total_e + current_e - 1.0/a;
 3bd:	f2 0f 58 e0          	addsd  xmm4,xmm0
 3c1:	f2 0f 5c 25 00 00 00 	subsd  xmm4,QWORD PTR [rip+0x0]        # 3c9 <main+0x3c9>
 3c8:	00 
 3c9:	e9 69 fe ff ff       	jmp    237 <main+0x237>
 3ce:	be 00 00 00 00       	mov    esi,0x0
 3d3:	bf 01 00 00 00       	mov    edi,0x1
 3d8:	31 c0                	xor    eax,eax
 3da:	e8 00 00 00 00       	call   3df <main+0x3df>
    }
    q=(double *)malloc(natom*sizeof(double));
    if ( q == NULL )
    {
        printf("Allocation error q");
        exit(1);
 3df:	bf 01 00 00 00       	mov    edi,0x1
 3e4:	e8 00 00 00 00       	call   3e9 <main+0x3e9>
 3e9:	48 8b 55 08          	mov    rdx,QWORD PTR [rbp+0x8]
 3ed:	bf 01 00 00 00       	mov    edi,0x1
 3f2:	be 00 00 00 00       	mov    esi,0x0
 3f7:	e8 00 00 00 00       	call   3fc <main+0x3fc>
    /* Step 2 - Open the coordinate file and read the first line to
       obtain the number of atoms */
    if ((fptr=fopen(argv[1],"r"))==NULL)
    {
        printf("ERROR: Could not open file called %s\n",argv[1]);
        exit(1);
 3fc:	bf 01 00 00 00       	mov    edi,0x1
 401:	e8 00 00 00 00       	call   406 <main+0x406>
 406:	f2 0f 11 64 24 10    	movsd  QWORD PTR [rsp+0x10],xmm4
            {
                vec2 = pow((coords[0][i-1]-coords[0][j-1]),2.0)
                       + pow((coords[1][i-1]-coords[1][j-1]),2.0)
                       + pow((coords[2][i-1]-coords[2][j-1]),2.0);
                /* X^2 + Y^2 + Z^2 */
                rij = sqrt(vec2);
 40c:	e8 00 00 00 00       	call   411 <main+0x411>
 411:	f2 0f 10 64 24 10    	movsd  xmm4,QWORD PTR [rsp+0x10]
 417:	66 0f 28 d0          	movapd xmm2,xmm0
 41b:	e9 07 fe ff ff       	jmp    227 <main+0x227>
