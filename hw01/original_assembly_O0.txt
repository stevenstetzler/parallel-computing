
original.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <main>:
#include <math.h>
double **alloc_2D_double(int nrows, int ncolumns);
void double_2D_array_free(double **array);

int main(int argc, char *argv[])
{
   0:	55                   	push   rbp
   1:	48 89 e5             	mov    rbp,rsp
   4:	48 81 ec b0 00 00 00 	sub    rsp,0xb0
   b:	89 bd 6c ff ff ff    	mov    DWORD PTR [rbp-0x94],edi
  11:	48 89 b5 60 ff ff ff 	mov    QWORD PTR [rbp-0xa0],rsi
    double total_e, current_e, vec2, rij;
    double a;
    FILE *fptr;
    char *cptr;

    a = 3.2;
  18:	48 b8 9a 99 99 99 99 	movabs rax,0x400999999999999a
  1f:	99 09 40 
  22:	48 89 45 a8          	mov    QWORD PTR [rbp-0x58],rax

    time0 = clock(); /*Start Time*/
  26:	e8 00 00 00 00       	call   2b <main+0x2b>
  2b:	48 89 45 b0          	mov    QWORD PTR [rbp-0x50],rax
    printf("Value of system clock at start = %ld\n",time0);
  2f:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
  33:	48 89 c6             	mov    rsi,rax
  36:	bf 00 00 00 00       	mov    edi,0x0
  3b:	b8 00 00 00 00       	mov    eax,0x0
  40:	e8 00 00 00 00       	call   45 <main+0x45>
       cut from the command line.
                Argument 1 should be the filename of the coord file (char).
                Argument 2 should be the cut off (float). */
    /* Quit therefore if iarg does not equal 3 = executable name,
       filename, cut off */
    if (argc != 3)
  45:	83 bd 6c ff ff ff 03 	cmp    DWORD PTR [rbp-0x94],0x3
  4c:	74 2e                	je     7c <main+0x7c>
    {
        printf("ERROR: only %d command line options detected", argc-1);
  4e:	8b 85 6c ff ff ff    	mov    eax,DWORD PTR [rbp-0x94]
  54:	83 e8 01             	sub    eax,0x1
  57:	89 c6                	mov    esi,eax
  59:	bf 00 00 00 00       	mov    edi,0x0
  5e:	b8 00 00 00 00       	mov    eax,0x0
  63:	e8 00 00 00 00       	call   68 <main+0x68>
        printf (" - need 2 options, filename and cutoff.\n");
  68:	bf 00 00 00 00       	mov    edi,0x0
  6d:	e8 00 00 00 00       	call   72 <main+0x72>
        exit(1);
  72:	bf 01 00 00 00       	mov    edi,0x1
  77:	e8 00 00 00 00       	call   7c <main+0x7c>
    }
    printf("Coordinates will be read from file: %s\n",argv[1]);
  7c:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  83:	48 83 c0 08          	add    rax,0x8
  87:	48 8b 00             	mov    rax,QWORD PTR [rax]
  8a:	48 89 c6             	mov    rsi,rax
  8d:	bf 00 00 00 00       	mov    edi,0x0
  92:	b8 00 00 00 00       	mov    eax,0x0
  97:	e8 00 00 00 00       	call   9c <main+0x9c>

    /* Step 2 - Open the coordinate file and read the first line to
       obtain the number of atoms */
    if ((fptr=fopen(argv[1],"r"))==NULL)
  9c:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  a3:	48 83 c0 08          	add    rax,0x8
  a7:	48 8b 00             	mov    rax,QWORD PTR [rax]
  aa:	be 00 00 00 00       	mov    esi,0x0
  af:	48 89 c7             	mov    rdi,rax
  b2:	e8 00 00 00 00       	call   b7 <main+0xb7>
  b7:	48 89 45 b8          	mov    QWORD PTR [rbp-0x48],rax
  bb:	48 83 7d b8 00       	cmp    QWORD PTR [rbp-0x48],0x0
  c0:	75 2a                	jne    ec <main+0xec>
    {
        printf("ERROR: Could not open file called %s\n",argv[1]);
  c2:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
  c9:	48 83 c0 08          	add    rax,0x8
  cd:	48 8b 00             	mov    rax,QWORD PTR [rax]
  d0:	48 89 c6             	mov    rsi,rax
  d3:	bf 00 00 00 00       	mov    edi,0x0
  d8:	b8 00 00 00 00       	mov    eax,0x0
  dd:	e8 00 00 00 00       	call   e2 <main+0xe2>
        exit(1);
  e2:	bf 01 00 00 00       	mov    edi,0x1
  e7:	e8 00 00 00 00       	call   ec <main+0xec>
    }
    else
    {
        fscanf(fptr, "%ld", &natom);
  ec:	48 8d 95 78 ff ff ff 	lea    rdx,[rbp-0x88]
  f3:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
  f7:	be 00 00 00 00       	mov    esi,0x0
  fc:	48 89 c7             	mov    rdi,rax
  ff:	b8 00 00 00 00       	mov    eax,0x0
 104:	e8 00 00 00 00       	call   109 <main+0x109>
    }

    printf("Natom = %ld\n", natom);
 109:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
 110:	48 89 c6             	mov    rsi,rax
 113:	bf 00 00 00 00       	mov    edi,0x0
 118:	b8 00 00 00 00       	mov    eax,0x0
 11d:	e8 00 00 00 00       	call   122 <main+0x122>

    cut = strtod(argv[2],&cptr);
 122:	48 8b 85 60 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa0]
 129:	48 83 c0 10          	add    rax,0x10
 12d:	48 8b 00             	mov    rax,QWORD PTR [rax]
 130:	48 8d 55 80          	lea    rdx,[rbp-0x80]
 134:	48 89 d6             	mov    rsi,rdx
 137:	48 89 c7             	mov    rdi,rax
 13a:	e8 00 00 00 00       	call   13f <main+0x13f>
 13f:	f2 0f 11 85 58 ff ff 	movsd  QWORD PTR [rbp-0xa8],xmm0
 146:	ff 
 147:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
 14e:	48 89 45 c0          	mov    QWORD PTR [rbp-0x40],rax
    printf("cut = %10.4f\n", cut);
 152:	48 8b 45 c0          	mov    rax,QWORD PTR [rbp-0x40]
 156:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
 15d:	f2 0f 10 85 58 ff ff 	movsd  xmm0,QWORD PTR [rbp-0xa8]
 164:	ff 
 165:	bf 00 00 00 00       	mov    edi,0x0
 16a:	b8 01 00 00 00       	mov    eax,0x1
 16f:	e8 00 00 00 00       	call   174 <main+0x174>

    /* Step 3 - Allocate the arrays to store the coordinate and charge
       data */
    coords=alloc_2D_double(3,natom);
 174:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
 17b:	89 c6                	mov    esi,eax
 17d:	bf 03 00 00 00       	mov    edi,0x3
 182:	e8 00 00 00 00       	call   187 <main+0x187>
 187:	48 89 45 c8          	mov    QWORD PTR [rbp-0x38],rax
    if ( coords==NULL )
 18b:	48 83 7d c8 00       	cmp    QWORD PTR [rbp-0x38],0x0
 190:	75 19                	jne    1ab <main+0x1ab>
    {
        printf("Allocation error coords");
 192:	bf 00 00 00 00       	mov    edi,0x0
 197:	b8 00 00 00 00       	mov    eax,0x0
 19c:	e8 00 00 00 00       	call   1a1 <main+0x1a1>
        exit(1);
 1a1:	bf 01 00 00 00       	mov    edi,0x1
 1a6:	e8 00 00 00 00       	call   1ab <main+0x1ab>
    }
    q=(double *)malloc(natom*sizeof(double));
 1ab:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
 1b2:	48 c1 e0 03          	shl    rax,0x3
 1b6:	48 89 c7             	mov    rdi,rax
 1b9:	e8 00 00 00 00       	call   1be <main+0x1be>
 1be:	48 89 45 d0          	mov    QWORD PTR [rbp-0x30],rax
    if ( q == NULL )
 1c2:	48 83 7d d0 00       	cmp    QWORD PTR [rbp-0x30],0x0
 1c7:	75 19                	jne    1e2 <main+0x1e2>
    {
        printf("Allocation error q");
 1c9:	bf 00 00 00 00       	mov    edi,0x0
 1ce:	b8 00 00 00 00       	mov    eax,0x0
 1d3:	e8 00 00 00 00       	call   1d8 <main+0x1d8>
        exit(1);
 1d8:	bf 01 00 00 00       	mov    edi,0x1
 1dd:	e8 00 00 00 00       	call   1e2 <main+0x1e2>
    }

    /* Step 4 - read the coordinates and charges. */
    for (i = 0; i<natom; ++i)
 1e2:	48 c7 45 88 00 00 00 	mov    QWORD PTR [rbp-0x78],0x0
 1e9:	00 
 1ea:	eb 75                	jmp    261 <main+0x261>
    {
        fscanf(fptr, "%lf %lf %lf %lf",&coords[0][i],
 1ec:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
               &coords[1][i],&coords[2][i],&q[i]);
 1f0:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
 1f7:	00 
    }

    /* Step 4 - read the coordinates and charges. */
    for (i = 0; i<natom; ++i)
    {
        fscanf(fptr, "%lf %lf %lf %lf",&coords[0][i],
 1f8:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
 1fc:	48 8d 3c 02          	lea    rdi,[rdx+rax*1]
               &coords[1][i],&coords[2][i],&q[i]);
 200:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
 204:	48 83 c0 10          	add    rax,0x10
 208:	48 8b 00             	mov    rax,QWORD PTR [rax]
    }

    /* Step 4 - read the coordinates and charges. */
    for (i = 0; i<natom; ++i)
    {
        fscanf(fptr, "%lf %lf %lf %lf",&coords[0][i],
 20b:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
               &coords[1][i],&coords[2][i],&q[i]);
 20f:	48 c1 e2 03          	shl    rdx,0x3
    }

    /* Step 4 - read the coordinates and charges. */
    for (i = 0; i<natom; ++i)
    {
        fscanf(fptr, "%lf %lf %lf %lf",&coords[0][i],
 213:	48 8d 34 10          	lea    rsi,[rax+rdx*1]
               &coords[1][i],&coords[2][i],&q[i]);
 217:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
 21b:	48 83 c0 08          	add    rax,0x8
 21f:	48 8b 00             	mov    rax,QWORD PTR [rax]
    }

    /* Step 4 - read the coordinates and charges. */
    for (i = 0; i<natom; ++i)
    {
        fscanf(fptr, "%lf %lf %lf %lf",&coords[0][i],
 222:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
               &coords[1][i],&coords[2][i],&q[i]);
 226:	48 c1 e2 03          	shl    rdx,0x3
    }

    /* Step 4 - read the coordinates and charges. */
    for (i = 0; i<natom; ++i)
    {
        fscanf(fptr, "%lf %lf %lf %lf",&coords[0][i],
 22a:	48 8d 0c 10          	lea    rcx,[rax+rdx*1]
 22e:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
 232:	48 8b 00             	mov    rax,QWORD PTR [rax]
 235:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
 239:	48 c1 e2 03          	shl    rdx,0x3
 23d:	48 01 c2             	add    rdx,rax
 240:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
 244:	49 89 f9             	mov    r9,rdi
 247:	49 89 f0             	mov    r8,rsi
 24a:	be 00 00 00 00       	mov    esi,0x0
 24f:	48 89 c7             	mov    rdi,rax
 252:	b8 00 00 00 00       	mov    eax,0x0
 257:	e8 00 00 00 00       	call   25c <main+0x25c>
        printf("Allocation error q");
        exit(1);
    }

    /* Step 4 - read the coordinates and charges. */
    for (i = 0; i<natom; ++i)
 25c:	48 83 45 88 01       	add    QWORD PTR [rbp-0x78],0x1
 261:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
 268:	48 39 45 88          	cmp    QWORD PTR [rbp-0x78],rax
 26c:	0f 8c 7a ff ff ff    	jl     1ec <main+0x1ec>
    {
        fscanf(fptr, "%lf %lf %lf %lf",&coords[0][i],
               &coords[1][i],&coords[2][i],&q[i]);
    }

    time1 = clock(); /*time after file read*/
 272:	e8 00 00 00 00       	call   277 <main+0x277>
 277:	48 89 45 d8          	mov    QWORD PTR [rbp-0x28],rax
    printf("Value of system clock after coord read = %ld\n",time1);
 27b:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
 27f:	48 89 c6             	mov    rsi,rax
 282:	bf 00 00 00 00       	mov    edi,0x0
 287:	b8 00 00 00 00       	mov    eax,0x0
 28c:	e8 00 00 00 00       	call   291 <main+0x291>


    /* Step 5 - calculate the number of pairs and E. - this is the
       majority of the work. */
    total_e = 0.0;
 291:	b8 00 00 00 00       	mov    eax,0x0
 296:	48 89 45 a0          	mov    QWORD PTR [rbp-0x60],rax
    cut_count = 0;
 29a:	48 c7 45 98 00 00 00 	mov    QWORD PTR [rbp-0x68],0x0
 2a1:	00 
    for (i=1; i<=natom; ++i)
 2a2:	48 c7 45 88 01 00 00 	mov    QWORD PTR [rbp-0x78],0x1
 2a9:	00 
 2aa:	e9 2d 02 00 00       	jmp    4dc <main+0x4dc>
    {
        for (j=1; j<=natom; ++j)
 2af:	48 c7 45 90 01 00 00 	mov    QWORD PTR [rbp-0x70],0x1
 2b6:	00 
 2b7:	e9 0a 02 00 00       	jmp    4c6 <main+0x4c6>
        {
            if ( j < i )   /* Avoid double counting. */
 2bc:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
 2c0:	48 3b 45 88          	cmp    rax,QWORD PTR [rbp-0x78]
 2c4:	0f 8d f7 01 00 00    	jge    4c1 <main+0x4c1>
            {
                vec2 = pow((coords[0][i-1]-coords[0][j-1]),2.0)
 2ca:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
 2ce:	48 8b 00             	mov    rax,QWORD PTR [rax]
 2d1:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
 2d5:	48 c1 e2 03          	shl    rdx,0x3
 2d9:	48 83 ea 08          	sub    rdx,0x8
 2dd:	48 01 d0             	add    rax,rdx
 2e0:	f2 0f 10 00          	movsd  xmm0,QWORD PTR [rax]
 2e4:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
 2e8:	48 8b 00             	mov    rax,QWORD PTR [rax]
 2eb:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
 2ef:	48 c1 e2 03          	shl    rdx,0x3
 2f3:	48 83 ea 08          	sub    rdx,0x8
 2f7:	48 01 d0             	add    rax,rdx
 2fa:	f2 0f 10 08          	movsd  xmm1,QWORD PTR [rax]
 2fe:	f2 0f 5c c1          	subsd  xmm0,xmm1
 302:	48 b8 00 00 00 00 00 	movabs rax,0x4000000000000000
 309:	00 00 40 
 30c:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
 313:	f2 0f 10 8d 58 ff ff 	movsd  xmm1,QWORD PTR [rbp-0xa8]
 31a:	ff 
 31b:	e8 00 00 00 00       	call   320 <main+0x320>
 320:	f2 0f 11 85 58 ff ff 	movsd  QWORD PTR [rbp-0xa8],xmm0
 327:	ff 
                       + pow((coords[1][i-1]-coords[1][j-1]),2.0)
 328:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
 32c:	48 83 c0 08          	add    rax,0x8
 330:	48 8b 00             	mov    rax,QWORD PTR [rax]
 333:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
 337:	48 c1 e2 03          	shl    rdx,0x3
 33b:	48 83 ea 08          	sub    rdx,0x8
 33f:	48 01 d0             	add    rax,rdx
 342:	f2 0f 10 00          	movsd  xmm0,QWORD PTR [rax]
 346:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
 34a:	48 83 c0 08          	add    rax,0x8
 34e:	48 8b 00             	mov    rax,QWORD PTR [rax]
 351:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
 355:	48 c1 e2 03          	shl    rdx,0x3
 359:	48 83 ea 08          	sub    rdx,0x8
 35d:	48 01 d0             	add    rax,rdx
 360:	f2 0f 10 08          	movsd  xmm1,QWORD PTR [rax]
 364:	f2 0f 5c c1          	subsd  xmm0,xmm1
 368:	48 b8 00 00 00 00 00 	movabs rax,0x4000000000000000
 36f:	00 00 40 
 372:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
 379:	f2 0f 10 8d 50 ff ff 	movsd  xmm1,QWORD PTR [rbp-0xb0]
 380:	ff 
 381:	e8 00 00 00 00       	call   386 <main+0x386>
 386:	66 0f 28 d0          	movapd xmm2,xmm0
 38a:	f2 0f 58 95 58 ff ff 	addsd  xmm2,QWORD PTR [rbp-0xa8]
 391:	ff 
 392:	f2 0f 11 95 58 ff ff 	movsd  QWORD PTR [rbp-0xa8],xmm2
 399:	ff 
                       + pow((coords[2][i-1]-coords[2][j-1]),2.0);
 39a:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
 39e:	48 83 c0 10          	add    rax,0x10
 3a2:	48 8b 00             	mov    rax,QWORD PTR [rax]
 3a5:	48 8b 55 88          	mov    rdx,QWORD PTR [rbp-0x78]
 3a9:	48 c1 e2 03          	shl    rdx,0x3
 3ad:	48 83 ea 08          	sub    rdx,0x8
 3b1:	48 01 d0             	add    rax,rdx
 3b4:	f2 0f 10 00          	movsd  xmm0,QWORD PTR [rax]
 3b8:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
 3bc:	48 83 c0 10          	add    rax,0x10
 3c0:	48 8b 00             	mov    rax,QWORD PTR [rax]
 3c3:	48 8b 55 90          	mov    rdx,QWORD PTR [rbp-0x70]
 3c7:	48 c1 e2 03          	shl    rdx,0x3
 3cb:	48 83 ea 08          	sub    rdx,0x8
 3cf:	48 01 d0             	add    rax,rdx
 3d2:	f2 0f 10 08          	movsd  xmm1,QWORD PTR [rax]
 3d6:	f2 0f 5c c1          	subsd  xmm0,xmm1
 3da:	48 b8 00 00 00 00 00 	movabs rax,0x4000000000000000
 3e1:	00 00 40 
 3e4:	48 89 85 50 ff ff ff 	mov    QWORD PTR [rbp-0xb0],rax
 3eb:	f2 0f 10 8d 50 ff ff 	movsd  xmm1,QWORD PTR [rbp-0xb0]
 3f2:	ff 
 3f3:	e8 00 00 00 00       	call   3f8 <main+0x3f8>
    {
        for (j=1; j<=natom; ++j)
        {
            if ( j < i )   /* Avoid double counting. */
            {
                vec2 = pow((coords[0][i-1]-coords[0][j-1]),2.0)
 3f8:	f2 0f 58 85 58 ff ff 	addsd  xmm0,QWORD PTR [rbp-0xa8]
 3ff:	ff 
 400:	f2 0f 11 45 e0       	movsd  QWORD PTR [rbp-0x20],xmm0
                       + pow((coords[1][i-1]-coords[1][j-1]),2.0)
                       + pow((coords[2][i-1]-coords[2][j-1]),2.0);
                /* X^2 + Y^2 + Z^2 */
                rij = sqrt(vec2);
 405:	48 8b 45 e0          	mov    rax,QWORD PTR [rbp-0x20]
 409:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
 410:	f2 0f 10 85 58 ff ff 	movsd  xmm0,QWORD PTR [rbp-0xa8]
 417:	ff 
 418:	e8 00 00 00 00       	call   41d <main+0x41d>
 41d:	f2 0f 11 85 58 ff ff 	movsd  QWORD PTR [rbp-0xa8],xmm0
 424:	ff 
 425:	48 8b 85 58 ff ff ff 	mov    rax,QWORD PTR [rbp-0xa8]
 42c:	48 89 45 e8          	mov    QWORD PTR [rbp-0x18],rax
                /* Check if this is below the cut off */
                if ( rij <= cut )
 430:	f2 0f 10 45 c0       	movsd  xmm0,QWORD PTR [rbp-0x40]
 435:	66 0f 2e 45 e8       	ucomisd xmm0,QWORD PTR [rbp-0x18]
 43a:	0f 82 81 00 00 00    	jb     4c1 <main+0x4c1>
                {
                    /* Increment the counter of pairs below cutoff */
                    ++cut_count;
 440:	48 83 45 98 01       	add    QWORD PTR [rbp-0x68],0x1
                    current_e = (exp(rij*q[i-1])*exp(rij*q[j-1]))/rij;
 445:	48 8b 45 88          	mov    rax,QWORD PTR [rbp-0x78]
 449:	48 c1 e0 03          	shl    rax,0x3
 44d:	48 8d 50 f8          	lea    rdx,[rax-0x8]
 451:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
 455:	48 01 d0             	add    rax,rdx
 458:	f2 0f 10 00          	movsd  xmm0,QWORD PTR [rax]
 45c:	f2 0f 59 45 e8       	mulsd  xmm0,QWORD PTR [rbp-0x18]
 461:	e8 00 00 00 00       	call   466 <main+0x466>
 466:	f2 0f 11 85 58 ff ff 	movsd  QWORD PTR [rbp-0xa8],xmm0
 46d:	ff 
 46e:	48 8b 45 90          	mov    rax,QWORD PTR [rbp-0x70]
 472:	48 c1 e0 03          	shl    rax,0x3
 476:	48 8d 50 f8          	lea    rdx,[rax-0x8]
 47a:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
 47e:	48 01 d0             	add    rax,rdx
 481:	f2 0f 10 00          	movsd  xmm0,QWORD PTR [rax]
 485:	f2 0f 59 45 e8       	mulsd  xmm0,QWORD PTR [rbp-0x18]
 48a:	e8 00 00 00 00       	call   48f <main+0x48f>
 48f:	f2 0f 59 85 58 ff ff 	mulsd  xmm0,QWORD PTR [rbp-0xa8]
 496:	ff 
 497:	f2 0f 5e 45 e8       	divsd  xmm0,QWORD PTR [rbp-0x18]
 49c:	f2 0f 11 45 f0       	movsd  QWORD PTR [rbp-0x10],xmm0
                    total_e = total_e + current_e - 1.0/a;
 4a1:	f2 0f 10 45 a0       	movsd  xmm0,QWORD PTR [rbp-0x60]
 4a6:	f2 0f 58 45 f0       	addsd  xmm0,QWORD PTR [rbp-0x10]
 4ab:	f2 0f 10 0d 00 00 00 	movsd  xmm1,QWORD PTR [rip+0x0]        # 4b3 <main+0x4b3>
 4b2:	00 
 4b3:	f2 0f 5e 4d a8       	divsd  xmm1,QWORD PTR [rbp-0x58]
 4b8:	f2 0f 5c c1          	subsd  xmm0,xmm1
 4bc:	f2 0f 11 45 a0       	movsd  QWORD PTR [rbp-0x60],xmm0
       majority of the work. */
    total_e = 0.0;
    cut_count = 0;
    for (i=1; i<=natom; ++i)
    {
        for (j=1; j<=natom; ++j)
 4c1:	48 83 45 90 01       	add    QWORD PTR [rbp-0x70],0x1
 4c6:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
 4cd:	48 39 45 90          	cmp    QWORD PTR [rbp-0x70],rax
 4d1:	0f 8e e5 fd ff ff    	jle    2bc <main+0x2bc>

    /* Step 5 - calculate the number of pairs and E. - this is the
       majority of the work. */
    total_e = 0.0;
    cut_count = 0;
    for (i=1; i<=natom; ++i)
 4d7:	48 83 45 88 01       	add    QWORD PTR [rbp-0x78],0x1
 4dc:	48 8b 85 78 ff ff ff 	mov    rax,QWORD PTR [rbp-0x88]
 4e3:	48 39 45 88          	cmp    QWORD PTR [rbp-0x78],rax
 4e7:	0f 8e c2 fd ff ff    	jle    2af <main+0x2af>
                }
            } /* if (j<i) */
        } /* for j=1 j<=natom */
    } /* for i=1 i<=natom */

    time2 = clock(); /* time after reading of file and calculation */
 4ed:	e8 00 00 00 00       	call   4f2 <main+0x4f2>
 4f2:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    printf("Value of system clock after coord read and E calc = %ld\n",
 4f6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
 4fa:	48 89 c6             	mov    rsi,rax
 4fd:	bf 00 00 00 00       	mov    edi,0x0
 502:	b8 00 00 00 00       	mov    eax,0x0
 507:	e8 00 00 00 00       	call   50c <main+0x50c>
           time2);

    /* Step 6 - write out the results */
    printf("                         Final Results\n");
 50c:	bf 00 00 00 00       	mov    edi,0x0
 511:	e8 00 00 00 00       	call   516 <main+0x516>
    printf("                         -------------\n");
 516:	bf 00 00 00 00       	mov    edi,0x0
 51b:	e8 00 00 00 00       	call   520 <main+0x520>
    printf("                   Num Pairs = %ld\n",cut_count);
 520:	48 8b 45 98          	mov    rax,QWORD PTR [rbp-0x68]
 524:	48 89 c6             	mov    rsi,rax
 527:	bf 00 00 00 00       	mov    edi,0x0
 52c:	b8 00 00 00 00       	mov    eax,0x0
 531:	e8 00 00 00 00       	call   536 <main+0x536>
    printf("                     Total E = %14.10f\n",total_e);
 536:	48 8b 45 a0          	mov    rax,QWORD PTR [rbp-0x60]
 53a:	48 89 85 58 ff ff ff 	mov    QWORD PTR [rbp-0xa8],rax
 541:	f2 0f 10 85 58 ff ff 	movsd  xmm0,QWORD PTR [rbp-0xa8]
 548:	ff 
 549:	bf 00 00 00 00       	mov    edi,0x0
 54e:	b8 01 00 00 00       	mov    eax,0x1
 553:	e8 00 00 00 00       	call   558 <main+0x558>
    printf("     Time to read coord file = %14.4f Seconds\n",
           ((double )(time1-time0))/(double )CLOCKS_PER_SEC);
 558:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
 55c:	48 8b 55 d8          	mov    rdx,QWORD PTR [rbp-0x28]
 560:	48 29 c2             	sub    rdx,rax
 563:	48 89 d0             	mov    rax,rdx
 566:	f2 48 0f 2a c0       	cvtsi2sd xmm0,rax
    /* Step 6 - write out the results */
    printf("                         Final Results\n");
    printf("                         -------------\n");
    printf("                   Num Pairs = %ld\n",cut_count);
    printf("                     Total E = %14.10f\n",total_e);
    printf("     Time to read coord file = %14.4f Seconds\n",
 56b:	f2 0f 10 0d 00 00 00 	movsd  xmm1,QWORD PTR [rip+0x0]        # 573 <main+0x573>
 572:	00 
 573:	f2 0f 5e c1          	divsd  xmm0,xmm1
 577:	bf 00 00 00 00       	mov    edi,0x0
 57c:	b8 01 00 00 00       	mov    eax,0x1
 581:	e8 00 00 00 00       	call   586 <main+0x586>
           ((double )(time1-time0))/(double )CLOCKS_PER_SEC);
    printf("         Time to calculate E = %14.4f Seconds\n",
           ((double )(time2-time1))/(double )CLOCKS_PER_SEC);
 586:	48 8b 45 d8          	mov    rax,QWORD PTR [rbp-0x28]
 58a:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
 58e:	48 29 c2             	sub    rdx,rax
 591:	48 89 d0             	mov    rax,rdx
 594:	f2 48 0f 2a c0       	cvtsi2sd xmm0,rax
    printf("                         -------------\n");
    printf("                   Num Pairs = %ld\n",cut_count);
    printf("                     Total E = %14.10f\n",total_e);
    printf("     Time to read coord file = %14.4f Seconds\n",
           ((double )(time1-time0))/(double )CLOCKS_PER_SEC);
    printf("         Time to calculate E = %14.4f Seconds\n",
 599:	f2 0f 10 0d 00 00 00 	movsd  xmm1,QWORD PTR [rip+0x0]        # 5a1 <main+0x5a1>
 5a0:	00 
 5a1:	f2 0f 5e c1          	divsd  xmm0,xmm1
 5a5:	bf 00 00 00 00       	mov    edi,0x0
 5aa:	b8 01 00 00 00       	mov    eax,0x1
 5af:	e8 00 00 00 00       	call   5b4 <main+0x5b4>
           ((double )(time2-time1))/(double )CLOCKS_PER_SEC);
    printf("        Total Execution Time = %14.4f Seconds\n",
           ((double )(time2-time0))/(double )CLOCKS_PER_SEC);
 5b4:	48 8b 45 b0          	mov    rax,QWORD PTR [rbp-0x50]
 5b8:	48 8b 55 f8          	mov    rdx,QWORD PTR [rbp-0x8]
 5bc:	48 29 c2             	sub    rdx,rax
 5bf:	48 89 d0             	mov    rax,rdx
 5c2:	f2 48 0f 2a c0       	cvtsi2sd xmm0,rax
    printf("                     Total E = %14.10f\n",total_e);
    printf("     Time to read coord file = %14.4f Seconds\n",
           ((double )(time1-time0))/(double )CLOCKS_PER_SEC);
    printf("         Time to calculate E = %14.4f Seconds\n",
           ((double )(time2-time1))/(double )CLOCKS_PER_SEC);
    printf("        Total Execution Time = %14.4f Seconds\n",
 5c7:	f2 0f 10 0d 00 00 00 	movsd  xmm1,QWORD PTR [rip+0x0]        # 5cf <main+0x5cf>
 5ce:	00 
 5cf:	f2 0f 5e c1          	divsd  xmm0,xmm1
 5d3:	bf 00 00 00 00       	mov    edi,0x0
 5d8:	b8 01 00 00 00       	mov    eax,0x1
 5dd:	e8 00 00 00 00       	call   5e2 <main+0x5e2>
           ((double )(time2-time0))/(double )CLOCKS_PER_SEC);

    /* Step 7 - Deallocate the arrays - we should strictly check the
       return values here but for the purposes of this tutorial we can
       ignore this. */
    free(q);
 5e2:	48 8b 45 d0          	mov    rax,QWORD PTR [rbp-0x30]
 5e6:	48 89 c7             	mov    rdi,rax
 5e9:	e8 00 00 00 00       	call   5ee <main+0x5ee>
    double_2D_array_free(coords);
 5ee:	48 8b 45 c8          	mov    rax,QWORD PTR [rbp-0x38]
 5f2:	48 89 c7             	mov    rdi,rax
 5f5:	e8 00 00 00 00       	call   5fa <main+0x5fa>

    fclose(fptr);
 5fa:	48 8b 45 b8          	mov    rax,QWORD PTR [rbp-0x48]
 5fe:	48 89 c7             	mov    rdi,rax
 601:	e8 00 00 00 00       	call   606 <main+0x606>

    exit(0);
 606:	bf 00 00 00 00       	mov    edi,0x0
 60b:	e8 00 00 00 00       	call   610 <alloc_2D_double>

0000000000000610 <alloc_2D_double>:
}

double **alloc_2D_double(int nrows, int ncolumns)
{
 610:	55                   	push   rbp
 611:	48 89 e5             	mov    rbp,rsp
 614:	48 83 ec 20          	sub    rsp,0x20
 618:	89 7d ec             	mov    DWORD PTR [rbp-0x14],edi
 61b:	89 75 e8             	mov    DWORD PTR [rbp-0x18],esi
       difficult! */

    /* Returns the pointer **array. Returns NULL on error */
    int i;

    double **array = (double **)malloc(nrows*sizeof(double *));
 61e:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
 621:	48 98                	cdqe   
 623:	48 c1 e0 03          	shl    rax,0x3
 627:	48 89 c7             	mov    rdi,rax
 62a:	e8 00 00 00 00       	call   62f <alloc_2D_double+0x1f>
 62f:	48 89 45 f8          	mov    QWORD PTR [rbp-0x8],rax
    if (array==NULL)
 633:	48 83 7d f8 00       	cmp    QWORD PTR [rbp-0x8],0x0
 638:	75 07                	jne    641 <alloc_2D_double+0x31>
        return NULL;
 63a:	b8 00 00 00 00       	mov    eax,0x0
 63f:	eb 79                	jmp    6ba <alloc_2D_double+0xaa>
    array[0] = (double *)malloc(nrows*ncolumns*sizeof(double));
 641:	8b 45 ec             	mov    eax,DWORD PTR [rbp-0x14]
 644:	0f af 45 e8          	imul   eax,DWORD PTR [rbp-0x18]
 648:	48 98                	cdqe   
 64a:	48 c1 e0 03          	shl    rax,0x3
 64e:	48 89 c7             	mov    rdi,rax
 651:	e8 00 00 00 00       	call   656 <alloc_2D_double+0x46>
 656:	48 89 c2             	mov    rdx,rax
 659:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
 65d:	48 89 10             	mov    QWORD PTR [rax],rdx
    if (array[0]==NULL)
 660:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
 664:	48 8b 00             	mov    rax,QWORD PTR [rax]
 667:	48 85 c0             	test   rax,rax
 66a:	75 07                	jne    673 <alloc_2D_double+0x63>
        return NULL;
 66c:	b8 00 00 00 00       	mov    eax,0x0
 671:	eb 47                	jmp    6ba <alloc_2D_double+0xaa>

    for (i = 1; i < nrows; ++i)
 673:	c7 45 f4 01 00 00 00 	mov    DWORD PTR [rbp-0xc],0x1
 67a:	eb 32                	jmp    6ae <alloc_2D_double+0x9e>
        array[i] = array[0] + i * ncolumns;
 67c:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
 67f:	48 98                	cdqe   
 681:	48 8d 14 c5 00 00 00 	lea    rdx,[rax*8+0x0]
 688:	00 
 689:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
 68d:	48 01 c2             	add    rdx,rax
 690:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
 694:	48 8b 08             	mov    rcx,QWORD PTR [rax]
 697:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
 69a:	0f af 45 e8          	imul   eax,DWORD PTR [rbp-0x18]
 69e:	48 98                	cdqe   
 6a0:	48 c1 e0 03          	shl    rax,0x3
 6a4:	48 01 c8             	add    rax,rcx
 6a7:	48 89 02             	mov    QWORD PTR [rdx],rax
        return NULL;
    array[0] = (double *)malloc(nrows*ncolumns*sizeof(double));
    if (array[0]==NULL)
        return NULL;

    for (i = 1; i < nrows; ++i)
 6aa:	83 45 f4 01          	add    DWORD PTR [rbp-0xc],0x1
 6ae:	8b 45 f4             	mov    eax,DWORD PTR [rbp-0xc]
 6b1:	3b 45 ec             	cmp    eax,DWORD PTR [rbp-0x14]
 6b4:	7c c6                	jl     67c <alloc_2D_double+0x6c>
        array[i] = array[0] + i * ncolumns;

    return array;
 6b6:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]

}
 6ba:	c9                   	leave  
 6bb:	c3                   	ret    

00000000000006bc <double_2D_array_free>:

void double_2D_array_free(double **array)
{
 6bc:	55                   	push   rbp
 6bd:	48 89 e5             	mov    rbp,rsp
 6c0:	48 83 ec 10          	sub    rsp,0x10
 6c4:	48 89 7d f8          	mov    QWORD PTR [rbp-0x8],rdi
    /* Frees the memory previously allocated by alloc_2D_double */
    free(array[0]);
 6c8:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
 6cc:	48 8b 00             	mov    rax,QWORD PTR [rax]
 6cf:	48 89 c7             	mov    rdi,rax
 6d2:	e8 00 00 00 00       	call   6d7 <double_2D_array_free+0x1b>
    free(array);
 6d7:	48 8b 45 f8          	mov    rax,QWORD PTR [rbp-0x8]
 6db:	48 89 c7             	mov    rdi,rax
 6de:	e8 00 00 00 00       	call   6e3 <double_2D_array_free+0x27>
}
 6e3:	c9                   	leave  
 6e4:	c3                   	ret    
