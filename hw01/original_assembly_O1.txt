
original.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <alloc_2D_double>:

    exit(0);
}

double **alloc_2D_double(int nrows, int ncolumns)
{
   0:	41 54                	push   r12
   2:	55                   	push   rbp
   3:	53                   	push   rbx
   4:	89 fd                	mov    ebp,edi
   6:	41 89 f4             	mov    r12d,esi
       difficult! */

    /* Returns the pointer **array. Returns NULL on error */
    int i;

    double **array = (double **)malloc(nrows*sizeof(double *));
   9:	48 63 ff             	movsxd rdi,edi
   c:	48 c1 e7 03          	shl    rdi,0x3
  10:	e8 00 00 00 00       	call   15 <alloc_2D_double+0x15>
  15:	48 89 c3             	mov    rbx,rax
    if (array==NULL)
  18:	48 85 c0             	test   rax,rax
  1b:	74 4c                	je     69 <alloc_2D_double+0x69>
        return NULL;
    array[0] = (double *)malloc(nrows*ncolumns*sizeof(double));
  1d:	89 ef                	mov    edi,ebp
  1f:	41 0f af fc          	imul   edi,r12d
  23:	48 63 ff             	movsxd rdi,edi
  26:	48 c1 e7 03          	shl    rdi,0x3
  2a:	e8 00 00 00 00       	call   2f <alloc_2D_double+0x2f>
  2f:	48 89 03             	mov    QWORD PTR [rbx],rax
    if (array[0]==NULL)
  32:	48 85 c0             	test   rax,rax
  35:	74 39                	je     70 <alloc_2D_double+0x70>
        return NULL;

    for (i = 1; i < nrows; ++i)
  37:	83 fd 01             	cmp    ebp,0x1
  3a:	7e 3b                	jle    77 <alloc_2D_double+0x77>
  3c:	45 89 e0             	mov    r8d,r12d
  3f:	48 8d 53 08          	lea    rdx,[rbx+0x8]
  43:	8d 45 fe             	lea    eax,[rbp-0x2]
  46:	48 8d 44 c3 10       	lea    rax,[rbx+rax*8+0x10]
  4b:	44 89 e6             	mov    esi,r12d
        array[i] = array[0] + i * ncolumns;
  4e:	48 63 fe             	movsxd rdi,esi
  51:	48 8b 0b             	mov    rcx,QWORD PTR [rbx]
  54:	48 8d 0c f9          	lea    rcx,[rcx+rdi*8]
  58:	48 89 0a             	mov    QWORD PTR [rdx],rcx
  5b:	44 01 c6             	add    esi,r8d
  5e:	48 83 c2 08          	add    rdx,0x8
        return NULL;
    array[0] = (double *)malloc(nrows*ncolumns*sizeof(double));
    if (array[0]==NULL)
        return NULL;

    for (i = 1; i < nrows; ++i)
  62:	48 39 c2             	cmp    rdx,rax
  65:	75 e7                	jne    4e <alloc_2D_double+0x4e>
  67:	eb 13                	jmp    7c <alloc_2D_double+0x7c>
    /* Returns the pointer **array. Returns NULL on error */
    int i;

    double **array = (double **)malloc(nrows*sizeof(double *));
    if (array==NULL)
        return NULL;
  69:	b8 00 00 00 00       	mov    eax,0x0
  6e:	eb 0f                	jmp    7f <alloc_2D_double+0x7f>
    array[0] = (double *)malloc(nrows*ncolumns*sizeof(double));
    if (array[0]==NULL)
        return NULL;
  70:	b8 00 00 00 00       	mov    eax,0x0
  75:	eb 08                	jmp    7f <alloc_2D_double+0x7f>

    for (i = 1; i < nrows; ++i)
        array[i] = array[0] + i * ncolumns;

    return array;
  77:	48 89 d8             	mov    rax,rbx
  7a:	eb 03                	jmp    7f <alloc_2D_double+0x7f>
  7c:	48 89 d8             	mov    rax,rbx

}
  7f:	5b                   	pop    rbx
  80:	5d                   	pop    rbp
  81:	41 5c                	pop    r12
  83:	c3                   	ret    

0000000000000084 <double_2D_array_free>:

void double_2D_array_free(double **array)
{
  84:	53                   	push   rbx
  85:	48 89 fb             	mov    rbx,rdi
    /* Frees the memory previously allocated by alloc_2D_double */
    free(array[0]);
  88:	48 8b 3f             	mov    rdi,QWORD PTR [rdi]
  8b:	e8 00 00 00 00       	call   90 <double_2D_array_free+0xc>
    free(array);
  90:	48 89 df             	mov    rdi,rbx
  93:	e8 00 00 00 00       	call   98 <double_2D_array_free+0x14>
}
  98:	5b                   	pop    rbx
  99:	c3                   	ret    

000000000000009a <main>:
#include <math.h>
double **alloc_2D_double(int nrows, int ncolumns);
void double_2D_array_free(double **array);

int main(int argc, char *argv[])
{
  9a:	41 57                	push   r15
  9c:	41 56                	push   r14
  9e:	41 55                	push   r13
  a0:	41 54                	push   r12
  a2:	55                   	push   rbp
  a3:	53                   	push   rbx
  a4:	48 83 ec 58          	sub    rsp,0x58
  a8:	89 fb                	mov    ebx,edi
  aa:	48 89 f5             	mov    rbp,rsi
    FILE *fptr;
    char *cptr;

    a = 3.2;

    time0 = clock(); /*Start Time*/
  ad:	e8 00 00 00 00       	call   b2 <main+0x18>
  b2:	48 89 44 24 30       	mov    QWORD PTR [rsp+0x30],rax
}

__fortify_function int
printf (const char *__restrict __fmt, ...)
{
  return __printf_chk (__USE_FORTIFY_LEVEL - 1, __fmt, __va_arg_pack ());
  b7:	48 89 c2             	mov    rdx,rax
  ba:	be 00 00 00 00       	mov    esi,0x0
  bf:	bf 01 00 00 00       	mov    edi,0x1
  c4:	b8 00 00 00 00       	mov    eax,0x0
  c9:	e8 00 00 00 00       	call   ce <main+0x34>
       cut from the command line.
                Argument 1 should be the filename of the coord file (char).
                Argument 2 should be the cut off (float). */
    /* Quit therefore if iarg does not equal 3 = executable name,
       filename, cut off */
    if (argc != 3)
  ce:	83 fb 03             	cmp    ebx,0x3
  d1:	74 2b                	je     fe <main+0x64>
    {
        printf("ERROR: only %d command line options detected", argc-1);
  d3:	8d 53 ff             	lea    edx,[rbx-0x1]
  d6:	be 00 00 00 00       	mov    esi,0x0
  db:	bf 01 00 00 00       	mov    edi,0x1
  e0:	b8 00 00 00 00       	mov    eax,0x0
  e5:	e8 00 00 00 00       	call   ea <main+0x50>
  ea:	bf 00 00 00 00       	mov    edi,0x0
  ef:	e8 00 00 00 00       	call   f4 <main+0x5a>
        printf (" - need 2 options, filename and cutoff.\n");
        exit(1);
  f4:	bf 01 00 00 00       	mov    edi,0x1
  f9:	e8 00 00 00 00       	call   fe <main+0x64>
  fe:	48 8b 55 08          	mov    rdx,QWORD PTR [rbp+0x8]
 102:	be 00 00 00 00       	mov    esi,0x0
 107:	bf 01 00 00 00       	mov    edi,0x1
 10c:	b8 00 00 00 00       	mov    eax,0x0
 111:	e8 00 00 00 00       	call   116 <main+0x7c>
    }
    printf("Coordinates will be read from file: %s\n",argv[1]);

    /* Step 2 - Open the coordinate file and read the first line to
       obtain the number of atoms */
    if ((fptr=fopen(argv[1],"r"))==NULL)
 116:	48 8b 7d 08          	mov    rdi,QWORD PTR [rbp+0x8]
 11a:	be 00 00 00 00       	mov    esi,0x0
 11f:	e8 00 00 00 00       	call   124 <main+0x8a>
 124:	48 89 44 24 20       	mov    QWORD PTR [rsp+0x20],rax
 129:	48 85 c0             	test   rax,rax
 12c:	75 1d                	jne    14b <main+0xb1>
 12e:	48 8b 55 08          	mov    rdx,QWORD PTR [rbp+0x8]
 132:	be 00 00 00 00       	mov    esi,0x0
 137:	bf 01 00 00 00       	mov    edi,0x1
 13c:	e8 00 00 00 00       	call   141 <main+0xa7>
    {
        printf("ERROR: Could not open file called %s\n",argv[1]);
        exit(1);
 141:	bf 01 00 00 00       	mov    edi,0x1
 146:	e8 00 00 00 00       	call   14b <main+0xb1>
    }
    else
    {
        fscanf(fptr, "%ld", &natom);
 14b:	48 8d 54 24 40       	lea    rdx,[rsp+0x40]
 150:	be 00 00 00 00       	mov    esi,0x0
 155:	48 8b 7c 24 20       	mov    rdi,QWORD PTR [rsp+0x20]
 15a:	b8 00 00 00 00       	mov    eax,0x0
 15f:	e8 00 00 00 00       	call   164 <main+0xca>
 164:	48 8b 54 24 40       	mov    rdx,QWORD PTR [rsp+0x40]
 169:	be 00 00 00 00       	mov    esi,0x0
 16e:	bf 01 00 00 00       	mov    edi,0x1
 173:	b8 00 00 00 00       	mov    eax,0x0
 178:	e8 00 00 00 00       	call   17d <main+0xe3>
    }

    printf("Natom = %ld\n", natom);

    cut = strtod(argv[2],&cptr);
 17d:	48 8b 7d 10          	mov    rdi,QWORD PTR [rbp+0x10]
 181:	48 8d 74 24 48       	lea    rsi,[rsp+0x48]
 186:	e8 00 00 00 00       	call   18b <main+0xf1>
 18b:	f2 0f 11 44 24 08    	movsd  QWORD PTR [rsp+0x8],xmm0
 191:	be 00 00 00 00       	mov    esi,0x0
 196:	bf 01 00 00 00       	mov    edi,0x1
 19b:	b8 01 00 00 00       	mov    eax,0x1
 1a0:	e8 00 00 00 00       	call   1a5 <main+0x10b>
    printf("cut = %10.4f\n", cut);

    /* Step 3 - Allocate the arrays to store the coordinate and charge
       data */
    coords=alloc_2D_double(3,natom);
 1a5:	8b 74 24 40          	mov    esi,DWORD PTR [rsp+0x40]
 1a9:	bf 03 00 00 00       	mov    edi,0x3
 1ae:	e8 00 00 00 00       	call   1b3 <main+0x119>
 1b3:	49 89 c4             	mov    r12,rax
    if ( coords==NULL )
 1b6:	48 85 c0             	test   rax,rax
 1b9:	75 1e                	jne    1d9 <main+0x13f>
 1bb:	be 00 00 00 00       	mov    esi,0x0
 1c0:	bf 01 00 00 00       	mov    edi,0x1
 1c5:	b8 00 00 00 00       	mov    eax,0x0
 1ca:	e8 00 00 00 00       	call   1cf <main+0x135>
    {
        printf("Allocation error coords");
        exit(1);
 1cf:	bf 01 00 00 00       	mov    edi,0x1
 1d4:	e8 00 00 00 00       	call   1d9 <main+0x13f>
    }
    q=(double *)malloc(natom*sizeof(double));
 1d9:	48 8b 44 24 40       	mov    rax,QWORD PTR [rsp+0x40]
 1de:	48 8d 3c c5 00 00 00 	lea    rdi,[rax*8+0x0]
 1e5:	00 
 1e6:	e8 00 00 00 00       	call   1eb <main+0x151>
 1eb:	49 89 c7             	mov    r15,rax
    if ( q == NULL )
 1ee:	48 85 c0             	test   rax,rax
 1f1:	74 12                	je     205 <main+0x16b>
 1f3:	48 89 c5             	mov    rbp,rax
        printf("Allocation error q");
        exit(1);
    }

    /* Step 4 - read the coordinates and charges. */
    for (i = 0; i<natom; ++i)
 1f6:	bb 00 00 00 00       	mov    ebx,0x0
 1fb:	48 83 7c 24 40 00    	cmp    QWORD PTR [rsp+0x40],0x0
 201:	7f 20                	jg     223 <main+0x189>
 203:	eb 60                	jmp    265 <main+0x1cb>
 205:	be 00 00 00 00       	mov    esi,0x0
 20a:	bf 01 00 00 00       	mov    edi,0x1
 20f:	b8 00 00 00 00       	mov    eax,0x0
 214:	e8 00 00 00 00       	call   219 <main+0x17f>
    }
    q=(double *)malloc(natom*sizeof(double));
    if ( q == NULL )
    {
        printf("Allocation error q");
        exit(1);
 219:	bf 01 00 00 00       	mov    edi,0x1
 21e:	e8 00 00 00 00       	call   223 <main+0x189>
 223:	4c 8d 04 dd 00 00 00 	lea    r8,[rbx*8+0x0]
 22a:	00 
    }

    /* Step 4 - read the coordinates and charges. */
    for (i = 0; i<natom; ++i)
    {
        fscanf(fptr, "%lf %lf %lf %lf",&coords[0][i],
 22b:	4c 89 c1             	mov    rcx,r8
 22e:	49 03 4c 24 08       	add    rcx,QWORD PTR [r12+0x8]
 233:	4c 89 c2             	mov    rdx,r8
 236:	49 03 14 24          	add    rdx,QWORD PTR [r12]
 23a:	49 89 e9             	mov    r9,rbp
 23d:	4d 03 44 24 10       	add    r8,QWORD PTR [r12+0x10]
 242:	be 00 00 00 00       	mov    esi,0x0
 247:	48 8b 7c 24 20       	mov    rdi,QWORD PTR [rsp+0x20]
 24c:	b8 00 00 00 00       	mov    eax,0x0
 251:	e8 00 00 00 00       	call   256 <main+0x1bc>
        printf("Allocation error q");
        exit(1);
    }

    /* Step 4 - read the coordinates and charges. */
    for (i = 0; i<natom; ++i)
 256:	48 83 c3 01          	add    rbx,0x1
 25a:	48 83 c5 08          	add    rbp,0x8
 25e:	48 39 5c 24 40       	cmp    QWORD PTR [rsp+0x40],rbx
 263:	7f be                	jg     223 <main+0x189>
    {
        fscanf(fptr, "%lf %lf %lf %lf",&coords[0][i],
               &coords[1][i],&coords[2][i],&q[i]);
    }

    time1 = clock(); /*time after file read*/
 265:	e8 00 00 00 00       	call   26a <main+0x1d0>
 26a:	48 89 44 24 38       	mov    QWORD PTR [rsp+0x38],rax
 26f:	48 89 c2             	mov    rdx,rax
 272:	be 00 00 00 00       	mov    esi,0x0
 277:	bf 01 00 00 00       	mov    edi,0x1
 27c:	b8 00 00 00 00       	mov    eax,0x0
 281:	e8 00 00 00 00       	call   286 <main+0x1ec>

    /* Step 5 - calculate the number of pairs and E. - this is the
       majority of the work. */
    total_e = 0.0;
    cut_count = 0;
    for (i=1; i<=natom; ++i)
 286:	48 83 7c 24 40 00    	cmp    QWORD PTR [rsp+0x40],0x0
 28c:	0f 8e 33 01 00 00    	jle    3c5 <main+0x32b>
 292:	41 bd 00 00 00 00    	mov    r13d,0x0
 298:	bd 01 00 00 00       	mov    ebp,0x1
    printf("Value of system clock after coord read = %ld\n",time1);


    /* Step 5 - calculate the number of pairs and E. - this is the
       majority of the work. */
    total_e = 0.0;
 29d:	66 0f 57 ff          	xorpd  xmm7,xmm7
 2a1:	f2 0f 11 7c 24 10    	movsd  QWORD PTR [rsp+0x10],xmm7
    cut_count = 0;
 2a7:	48 c7 44 24 28 00 00 	mov    QWORD PTR [rsp+0x28],0x0
 2ae:	00 00 
 2b0:	e9 fe 00 00 00       	jmp    3b3 <main+0x319>
    for (i=1; i<=natom; ++i)
    {
        for (j=1; j<=natom; ++j)
        {
            if ( j < i )   /* Avoid double counting. */
 2b5:	48 39 dd             	cmp    rbp,rbx
 2b8:	0f 8e d7 00 00 00    	jle    395 <main+0x2fb>
            {
                vec2 = pow((coords[0][i-1]-coords[0][j-1]),2.0)
 2be:	49 8b 14 24          	mov    rdx,QWORD PTR [r12]
 2c2:	49 89 de             	mov    r14,rbx
 2c5:	48 8d 04 dd 00 00 00 	lea    rax,[rbx*8+0x0]
 2cc:	00 
 2cd:	f2 42 0f 10 04 2a    	movsd  xmm0,QWORD PTR [rdx+r13*1]
 2d3:	f2 0f 5c 44 02 f8    	subsd  xmm0,QWORD PTR [rdx+rax*1-0x8]
                       + pow((coords[1][i-1]-coords[1][j-1]),2.0)
 2d9:	49 8b 54 24 08       	mov    rdx,QWORD PTR [r12+0x8]
 2de:	f2 42 0f 10 0c 2a    	movsd  xmm1,QWORD PTR [rdx+r13*1]
 2e4:	f2 0f 5c 4c 02 f8    	subsd  xmm1,QWORD PTR [rdx+rax*1-0x8]
                       + pow((coords[2][i-1]-coords[2][j-1]),2.0);
 2ea:	49 8b 54 24 10       	mov    rdx,QWORD PTR [r12+0x10]
 2ef:	f2 42 0f 10 14 2a    	movsd  xmm2,QWORD PTR [rdx+r13*1]
 2f5:	f2 0f 5c 54 02 f8    	subsd  xmm2,QWORD PTR [rdx+rax*1-0x8]
 2fb:	66 0f 28 e2          	movapd xmm4,xmm2
 2ff:	f2 0f 59 e2          	mulsd  xmm4,xmm2
        for (j=1; j<=natom; ++j)
        {
            if ( j < i )   /* Avoid double counting. */
            {
                vec2 = pow((coords[0][i-1]-coords[0][j-1]),2.0)
                       + pow((coords[1][i-1]-coords[1][j-1]),2.0)
 303:	66 0f 28 e9          	movapd xmm5,xmm1
 307:	f2 0f 59 e9          	mulsd  xmm5,xmm1
    {
        for (j=1; j<=natom; ++j)
        {
            if ( j < i )   /* Avoid double counting. */
            {
                vec2 = pow((coords[0][i-1]-coords[0][j-1]),2.0)
 30b:	66 0f 28 d8          	movapd xmm3,xmm0
 30f:	f2 0f 59 d8          	mulsd  xmm3,xmm0
                       + pow((coords[1][i-1]-coords[1][j-1]),2.0)
 313:	f2 0f 58 dd          	addsd  xmm3,xmm5
    {
        for (j=1; j<=natom; ++j)
        {
            if ( j < i )   /* Avoid double counting. */
            {
                vec2 = pow((coords[0][i-1]-coords[0][j-1]),2.0)
 317:	f2 0f 58 dc          	addsd  xmm3,xmm4
                       + pow((coords[1][i-1]-coords[1][j-1]),2.0)
                       + pow((coords[2][i-1]-coords[2][j-1]),2.0);
                /* X^2 + Y^2 + Z^2 */
                rij = sqrt(vec2);
 31b:	f2 0f 51 f3          	sqrtsd xmm6,xmm3
 31f:	f2 0f 11 34 24       	movsd  QWORD PTR [rsp],xmm6
 324:	66 0f 2e f6          	ucomisd xmm6,xmm6
 328:	7b 0e                	jnp    338 <main+0x29e>
    {
        for (j=1; j<=natom; ++j)
        {
            if ( j < i )   /* Avoid double counting. */
            {
                vec2 = pow((coords[0][i-1]-coords[0][j-1]),2.0)
 32a:	66 0f 28 c3          	movapd xmm0,xmm3
                       + pow((coords[1][i-1]-coords[1][j-1]),2.0)
                       + pow((coords[2][i-1]-coords[2][j-1]),2.0);
                /* X^2 + Y^2 + Z^2 */
                rij = sqrt(vec2);
 32e:	e8 00 00 00 00       	call   333 <main+0x299>
 333:	f2 0f 11 04 24       	movsd  QWORD PTR [rsp],xmm0
                /* Check if this is below the cut off */
                if ( rij <= cut )
 338:	f2 0f 10 7c 24 08    	movsd  xmm7,QWORD PTR [rsp+0x8]
 33e:	66 0f 2e 3c 24       	ucomisd xmm7,QWORD PTR [rsp]
 343:	72 50                	jb     395 <main+0x2fb>
                {
                    /* Increment the counter of pairs below cutoff */
                    ++cut_count;
 345:	48 83 44 24 28 01    	add    QWORD PTR [rsp+0x28],0x1
                    current_e = (exp(rij*q[i-1])*exp(rij*q[j-1]))/rij;
 34b:	f2 0f 10 04 24       	movsd  xmm0,QWORD PTR [rsp]
 350:	f2 43 0f 59 04 2f    	mulsd  xmm0,QWORD PTR [r15+r13*1]
 356:	e8 00 00 00 00       	call   35b <main+0x2c1>
 35b:	f2 0f 11 44 24 18    	movsd  QWORD PTR [rsp+0x18],xmm0
 361:	f2 0f 10 3c 24       	movsd  xmm7,QWORD PTR [rsp]
 366:	f2 43 0f 59 7c f7 f8 	mulsd  xmm7,QWORD PTR [r15+r14*8-0x8]
 36d:	66 0f 28 c7          	movapd xmm0,xmm7
 371:	e8 00 00 00 00       	call   376 <main+0x2dc>
 376:	f2 0f 59 44 24 18    	mulsd  xmm0,QWORD PTR [rsp+0x18]
 37c:	f2 0f 5e 04 24       	divsd  xmm0,QWORD PTR [rsp]
                    total_e = total_e + current_e - 1.0/a;
 381:	f2 0f 58 44 24 10    	addsd  xmm0,QWORD PTR [rsp+0x10]
 387:	f2 0f 5c 05 00 00 00 	subsd  xmm0,QWORD PTR [rip+0x0]        # 38f <main+0x2f5>
 38e:	00 
 38f:	f2 0f 11 44 24 10    	movsd  QWORD PTR [rsp+0x10],xmm0
       majority of the work. */
    total_e = 0.0;
    cut_count = 0;
    for (i=1; i<=natom; ++i)
    {
        for (j=1; j<=natom; ++j)
 395:	48 83 c3 01          	add    rbx,0x1
 399:	48 39 5c 24 40       	cmp    QWORD PTR [rsp+0x40],rbx
 39e:	0f 8d 11 ff ff ff    	jge    2b5 <main+0x21b>

    /* Step 5 - calculate the number of pairs and E. - this is the
       majority of the work. */
    total_e = 0.0;
    cut_count = 0;
    for (i=1; i<=natom; ++i)
 3a4:	48 83 c5 01          	add    rbp,0x1
 3a8:	49 83 c5 08          	add    r13,0x8
 3ac:	48 39 6c 24 40       	cmp    QWORD PTR [rsp+0x40],rbp
 3b1:	7c 25                	jl     3d8 <main+0x33e>
    {
        for (j=1; j<=natom; ++j)
 3b3:	48 83 7c 24 40 00    	cmp    QWORD PTR [rsp+0x40],0x0
 3b9:	7e e9                	jle    3a4 <main+0x30a>
 3bb:	bb 01 00 00 00       	mov    ebx,0x1
 3c0:	e9 f0 fe ff ff       	jmp    2b5 <main+0x21b>
    printf("Value of system clock after coord read = %ld\n",time1);


    /* Step 5 - calculate the number of pairs and E. - this is the
       majority of the work. */
    total_e = 0.0;
 3c5:	66 0f 57 ff          	xorpd  xmm7,xmm7
 3c9:	f2 0f 11 7c 24 10    	movsd  QWORD PTR [rsp+0x10],xmm7
    cut_count = 0;
 3cf:	48 c7 44 24 28 00 00 	mov    QWORD PTR [rsp+0x28],0x0
 3d6:	00 00 
                }
            } /* if (j<i) */
        } /* for j=1 j<=natom */
    } /* for i=1 i<=natom */

    time2 = clock(); /* time after reading of file and calculation */
 3d8:	e8 00 00 00 00       	call   3dd <main+0x343>
 3dd:	48 89 c3             	mov    rbx,rax
 3e0:	48 89 c2             	mov    rdx,rax
 3e3:	be 00 00 00 00       	mov    esi,0x0
 3e8:	bf 01 00 00 00       	mov    edi,0x1
 3ed:	b8 00 00 00 00       	mov    eax,0x0
 3f2:	e8 00 00 00 00       	call   3f7 <main+0x35d>
 3f7:	bf 00 00 00 00       	mov    edi,0x0
 3fc:	e8 00 00 00 00       	call   401 <main+0x367>
 401:	bf 00 00 00 00       	mov    edi,0x0
 406:	e8 00 00 00 00       	call   40b <main+0x371>
 40b:	48 8b 54 24 28       	mov    rdx,QWORD PTR [rsp+0x28]
 410:	be 00 00 00 00       	mov    esi,0x0
 415:	bf 01 00 00 00       	mov    edi,0x1
 41a:	b8 00 00 00 00       	mov    eax,0x0
 41f:	e8 00 00 00 00       	call   424 <main+0x38a>
 424:	f2 0f 10 44 24 10    	movsd  xmm0,QWORD PTR [rsp+0x10]
 42a:	be 00 00 00 00       	mov    esi,0x0
 42f:	bf 01 00 00 00       	mov    edi,0x1
 434:	b8 01 00 00 00       	mov    eax,0x1
 439:	e8 00 00 00 00       	call   43e <main+0x3a4>
    printf("                         Final Results\n");
    printf("                         -------------\n");
    printf("                   Num Pairs = %ld\n",cut_count);
    printf("                     Total E = %14.10f\n",total_e);
    printf("     Time to read coord file = %14.4f Seconds\n",
           ((double )(time1-time0))/(double )CLOCKS_PER_SEC);
 43e:	4c 8b 74 24 38       	mov    r14,QWORD PTR [rsp+0x38]
 443:	4c 89 f0             	mov    rax,r14
 446:	48 8b 6c 24 30       	mov    rbp,QWORD PTR [rsp+0x30]
 44b:	48 29 e8             	sub    rax,rbp
 44e:	f2 48 0f 2a c0       	cvtsi2sd xmm0,rax
    /* Step 6 - write out the results */
    printf("                         Final Results\n");
    printf("                         -------------\n");
    printf("                   Num Pairs = %ld\n",cut_count);
    printf("                     Total E = %14.10f\n",total_e);
    printf("     Time to read coord file = %14.4f Seconds\n",
 453:	f2 0f 5e 05 00 00 00 	divsd  xmm0,QWORD PTR [rip+0x0]        # 45b <main+0x3c1>
 45a:	00 
 45b:	be 00 00 00 00       	mov    esi,0x0
 460:	bf 01 00 00 00       	mov    edi,0x1
 465:	b8 01 00 00 00       	mov    eax,0x1
 46a:	e8 00 00 00 00       	call   46f <main+0x3d5>
           ((double )(time1-time0))/(double )CLOCKS_PER_SEC);
    printf("         Time to calculate E = %14.4f Seconds\n",
           ((double )(time2-time1))/(double )CLOCKS_PER_SEC);
 46f:	48 89 d8             	mov    rax,rbx
 472:	4c 29 f0             	sub    rax,r14
 475:	f2 48 0f 2a c0       	cvtsi2sd xmm0,rax
    printf("                         -------------\n");
    printf("                   Num Pairs = %ld\n",cut_count);
    printf("                     Total E = %14.10f\n",total_e);
    printf("     Time to read coord file = %14.4f Seconds\n",
           ((double )(time1-time0))/(double )CLOCKS_PER_SEC);
    printf("         Time to calculate E = %14.4f Seconds\n",
 47a:	f2 0f 5e 05 00 00 00 	divsd  xmm0,QWORD PTR [rip+0x0]        # 482 <main+0x3e8>
 481:	00 
 482:	be 00 00 00 00       	mov    esi,0x0
 487:	bf 01 00 00 00       	mov    edi,0x1
 48c:	b8 01 00 00 00       	mov    eax,0x1
 491:	e8 00 00 00 00       	call   496 <main+0x3fc>
           ((double )(time2-time1))/(double )CLOCKS_PER_SEC);
    printf("        Total Execution Time = %14.4f Seconds\n",
           ((double )(time2-time0))/(double )CLOCKS_PER_SEC);
 496:	48 29 eb             	sub    rbx,rbp
 499:	f2 48 0f 2a c3       	cvtsi2sd xmm0,rbx
    printf("                     Total E = %14.10f\n",total_e);
    printf("     Time to read coord file = %14.4f Seconds\n",
           ((double )(time1-time0))/(double )CLOCKS_PER_SEC);
    printf("         Time to calculate E = %14.4f Seconds\n",
           ((double )(time2-time1))/(double )CLOCKS_PER_SEC);
    printf("        Total Execution Time = %14.4f Seconds\n",
 49e:	f2 0f 5e 05 00 00 00 	divsd  xmm0,QWORD PTR [rip+0x0]        # 4a6 <main+0x40c>
 4a5:	00 
 4a6:	be 00 00 00 00       	mov    esi,0x0
 4ab:	bf 01 00 00 00       	mov    edi,0x1
 4b0:	b8 01 00 00 00       	mov    eax,0x1
 4b5:	e8 00 00 00 00       	call   4ba <main+0x420>
           ((double )(time2-time0))/(double )CLOCKS_PER_SEC);

    /* Step 7 - Deallocate the arrays - we should strictly check the
       return values here but for the purposes of this tutorial we can
       ignore this. */
    free(q);
 4ba:	4c 89 ff             	mov    rdi,r15
 4bd:	e8 00 00 00 00       	call   4c2 <main+0x428>
    double_2D_array_free(coords);
 4c2:	4c 89 e7             	mov    rdi,r12
 4c5:	e8 00 00 00 00       	call   4ca <main+0x430>

    fclose(fptr);
 4ca:	48 8b 7c 24 20       	mov    rdi,QWORD PTR [rsp+0x20]
 4cf:	e8 00 00 00 00       	call   4d4 <main+0x43a>

    exit(0);
 4d4:	bf 00 00 00 00       	mov    edi,0x0
 4d9:	e8 00 00 00 00       	call   4de <main+0x444>
